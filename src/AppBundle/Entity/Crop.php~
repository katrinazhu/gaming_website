<?php

namespace AppBundle\Entity;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Crop
 *
 * @ORM\Entity()
 * @ORM\Table(name="crop")
 */
class Crop
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="type", type="string", length=255)
     */
    private $type;

    /**
     * @var \DateTime
     *
     * @ORM\Column(type="datetime", name="dateBought")
     */
    private $dateBought;

    /**
     * @var int
     *
     * @ORM\Column(name="personnageID", type="integer")
     */
    private $personnageID;

    protected $timeLeft;


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set type
     *
     * @param string $type
     *
     * @return Crop
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set dateBought
     *
     * @param \DateTime $dateBought
     *
     * @return Crop
     */
    public function setDateBought($dateBought)
    {
        $this->dateBought = $dateBought;

        return $this;
    }

    /**
     * Get dateBought
     *
     * @return \DateTime
     */
    public function getDateBought()
    {
        return $this->dateBought;
    }

    /**
     * Set personnageID
     *
     * @param integer $personnageID
     *
     * @return Crop
     */
    public function setPersonnageID($personnageID)
    {
        $this->personnageID = $personnageID;

        return $this;
    }

    /**
     * Get personnageID
     *
     * @return int
     */
    public function getPersonnageID()
    {
        return $this->personnageID;
    }

    /**
     * Get timeLeft
     *
     * @return \DateTime
     */
    public function timeLeft()
    {
        // TODO: modify harvestTime
        $harvestTime = '+5 minutes';

        // calculate date when this crop will harvest
        $harvestDate = DateTime::createFromFormat('Y-m-d H:i:s', $this->getDateBought());
        $harvestDate->modify($harvestTime);

        // find current time
        date_default_timezone_set('France/Paris');
        $now = new DateTime();

        // calculate and return time left
        $timeLeft = $harvestDate->diff($now);
        return $timeLeft;
    }
}

